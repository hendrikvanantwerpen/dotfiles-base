#!/usr/bin/env bash

set -eu

log() {
    echo "$@" 1>&2
}

fail() {
    log "$@"
    exit 1
}

usage() {
    echo "Usage: git workbranch list"
    echo "       git workbranch add BRANCH_NAME COMMIT-ISH?"
    echo "       git workbranch remove BRANCH_NAME..."
    echo "       git workbranch help"
}

if [ $# -lt 1 ]; then
    fail "$(usage)"
fi
cmd="$1"
shift 1

current_dir="$(pwd)"
worktree_dir="$(dirname "$current_dir")"
worktree_name="$(basename "$current_dir")"
worktree_base="$(printf "%s" "$worktree_name" | sed -e 's/\..*$//')"

case "$cmd" in
    "list")
        git worktree list
        ;;
    "add")
        if [ $# -lt 1 ]; then
            fail "$(usage)"
        fi
        branch_name="$1"
        shift 1
        branch_dir="$worktree_dir/$worktree_base.$branch_name"
        if [ -e "$branch_dir" ]; then
            fail "Error: Branch directory $branch_dir already exists"
        fi
        branch_commitish=
        if [ $# -gt 0 ]; then
            branch_commitish="$1"
            shift 1
        fi
        if [ -n "$(git branch --list "$branch_name")" ]; then
            if [ -n "$branch_commitish" ]; then
                fail "Error: Cannot provide commit-ish for existing local branch: $branch_name"
            fi
            echo "Using local branch: $branch_name"
        elif remote_branch="$(git branch --list --remotes "*/$branch_name" | tr -d '[:space:]')"; [ -n "$remote_branch" ]; then
            if [ -n "$branch_commitish" ]; then
                fail "Error: Cannot provide commit-ish for existing remote branch: $remote_branch"
            fi
            echo "Using remote branch: $remote_branch"
        else
            if [ -n "$branch_commitish" ]; then
                echo "Creating branch: $branch_name at: $branch_commitish"
                git branch "$branch_name" "$branch_commitish"
            else
                echo "Creating branch: $branch_name"
                git branch "$branch_name"
            fi
        fi
        echo "Creating worktree: ../$worktree_base.$branch_name"
        git worktree add "$branch_dir" "$branch_name"
        echo "Updating submodules"
        git -C "$branch_dir" submodule update --init --recursive
        ;;
    "remove")
        if [ $# -lt 1 ]; then
            fail "$(usage)"
        fi
        for branch_name in "$@"; do
            branch_dir="$worktree_dir/$worktree_base.$branch_name"
            if [ "$branch_dir" == "$current_dir" ]; then
                fail "Error: Cannot remove current worktree"
            fi
            if [ -e "$branch_dir" ]; then
                git worktree remove -f "$branch_dir"
                echo "Worktree removed: ../$worktree_base.$branch_name"
            fi
            if [ -n "$(git branch --list "$branch_name")" ]; then
                git branch -D "$branch_name"
                echo "Branch removed: $branch_name"
            fi
        done
        ;;
    "help")
        usage
        exit 0
        ;;
    *)
        log "Error: Unexpected command '$cmd'"
        fail "$(usage)"
esac
