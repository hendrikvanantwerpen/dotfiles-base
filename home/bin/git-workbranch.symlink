#!/usr/bin/env bash

set -eu

log() {
    echo "$@" 1>&2
}

fail() {
    log "$@"
    exit 1
}

usage() {
    echo "Usage: git workbranch list"
    echo "       git workbranch add BRANCH_NAME COMMIT-ISH?"
    echo "       git workbranch remove [-f] BRANCH_NAME..."
    echo "       git workbranch help"
}

if [ $# -lt 1 ]; then
    fail "$(usage)"
fi
cmd="$1"
shift 1

worktree_dir="$(git rev-parse --show-toplevel)"
worktree_parent="$(dirname "$worktree_dir")"
worktree_name="$(basename "$worktree_dir")"
worktree_base="$(printf "%s" "$worktree_name" | sed -e 's/\..*$//')"

github_login=
if try_github_login="$(gh api user -q '.login')"; then
    github_login="$try_github_login"
else
    log "Warning: cannot determine GitHub login. Try running 'gh auth login'."
fi

expand_branch_name() {
    branch_name="$1"
    if [ -n "$github_login" ]; then
        branch_name="${branch_name/#@me/$github_login}"
    fi
    printf '%s' "$branch_name"
}

make_branch_dir() {
    branch_name="$1"
    if [ -n "$github_login" ]; then
        branch_name="${branch_name#$github_login/}"
    fi
    branch_suffix="$(printf '%s' "$branch_name" | tr '/' '_')"
    branch_dir="$worktree_parent/$worktree_base.$branch_suffix"
    printf '%s' "$branch_dir"
}

case "$cmd" in
    "list")
        git worktree list
        ;;
    "add")
        if [ $# -lt 1 ]; then
            fail "$(usage)"
        fi
        branch_name="$(expand_branch_name "$1")"
        shift 1
        branch_dir="$(make_branch_dir "$branch_name")"
        if [ -e "$branch_dir" ]; then
            fail "Error: Branch directory $branch_dir already exists"
        fi
        branch_commitish=
        if [ $# -gt 0 ]; then
            branch_commitish="$1"
            shift 1
        fi
        if [ -n "$(git branch --list "$branch_name")" ]; then
            if [ -n "$branch_commitish" ]; then
                fail "Error: Cannot provide commit-ish for existing local branch: $branch_name"
            fi
            echo "Using local branch: $branch_name"
        elif remote_branch="$(git branch --list --remotes "*/$branch_name" | tr -d '[:space:]')"; [ -n "$remote_branch" ]; then
            if [ -n "$branch_commitish" ]; then
                fail "Error: Cannot provide commit-ish for existing remote branch: $remote_branch"
            fi
            echo "Using remote branch: $remote_branch"
        else
            if [ -n "$branch_commitish" ]; then
                echo "Creating branch: $branch_name at: $branch_commitish"
                git branch "$branch_name" "$branch_commitish"
            else
                echo "Creating branch: $branch_name"
                git branch "$branch_name"
            fi
        fi
        echo "Creating worktree: $branch_dir"
        git worktree add "$branch_dir" "$branch_name"
        echo "Updating submodules"
        git -C "$branch_dir" submodule update --init --recursive --depth 1
        ;;
    "remove")
        branch_flag="-d"
        worktree_flag=""
        while [ $# -ne 0 ]; do
            case "$1" in
                "-f")
                    branch_flag="-D"
                    worktree_flag="-f"
                    shift 1
                    ;;
                *)
                    break
                    ;;
            esac
        done
        if [ $# -lt 1 ]; then
            fail "$(usage)"
        fi
        for branch_name in "$@"; do
            full_branch_name="$(expand_branch_name "$branch_name")"
            branch_dir="$(make_branch_dir "$full_branch_name")"
            if [ "$branch_dir" == "$worktree_dir" ]; then
                fail "Error: Cannot remove current worktree"
            fi
            if [ -e "$branch_dir" ]; then
                if git worktree remove $worktree_flag "$branch_dir"; then
                    echo "Worktree removed: $branch_dir"
                else
                    echo "Worktree NOT removed: $branch_dir"
                    continue
                fi
            fi
            if [ -n "$(git branch --list "$full_branch_name")" ]; then
                if git branch $branch_flag "$full_branch_name"; then
                    echo "Branch removed: $full_branch_name"
                else
                    echo "Branch NOT removed: $full_branch_name"
                    continue
                fi
            fi
        done
        ;;
    "help")
        usage
        exit 0
        ;;
    *)
        log "Error: Unexpected command '$cmd'"
        fail "$(usage)"
esac
