# .bashrc - Initialize Bash shell

. "$HOME/.sh_functions"

# Source global definitions
source_if_exists /etc/bashrc

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
   source_if_exists /etc/bash_completion
fi

# add various bin folders to PATH
if [ -d "/usr/local/sbin" ] ; then
    export PATH="/usr/local/sbin:$PATH"
fi
if [ -d "$HOME/.local/bin" ] ; then
    export PATH="$HOME/.local/bin:$PATH"
fi
if [ -d "$HOME/bin" ] ; then
    export PATH="$HOME/bin:$PATH"
fi

# ensure xdg cache exists
if [ -z "$XDG_CACHE_HOME" ]; then
    XDG_CACHE_HOME="$(mktemp -d -t cache.XXXX)"
    export XDG_CACHE_HOME
fi

# editor
if [ "${CODESPACES-false}" == "true" ]; then
    true # noop
elif [ "${TERM_PROGRAM-x}" == "vscode" ]; then
    export EDITOR="code --wait"
    export VISUAL="$EDITOR"
    export GIT_EDITOR="$EDITOR"
else
    export EDITOR="vim"
    export VISUAL="$EDITOR"
    export GIT_EDITOR="$EDITOR"
fi

# Source secrets
source_if_exists "$HOME/.secrets"

# Git aware prompt
export GITAWAREPROMPT="$HOME/.bash/git-aware-prompt"
if ! test -d "$GITAWAREPROMPT"; then
  echo "Warning: Missing $GITAWAREPROMPT"
else
  source_if_exists "$GITAWAREPROMPT/main.sh"
fi

# Set prompt
# shellcheck disable=SC2154
export PS1="\u@\h:\w\[$txtcyn\]\$git_branch\[$txtylw\]\$git_dirty\[$txtrst\]\$ "
# shellcheck disable=SC2154
export SUDO_PS1="\[$bakred\]\u@\h\[$txtrst\]:\w\$ "

# Dir handling
function cd {
    if (($# > 0)); then
        pushd "$@" >/dev/null || return
    else
        cd "$HOME" || return
    fi
}
alias dirs='dirs -v'

# emacs deamon control function
function emacsd {
    if (($# > 0)); then
        case "$1" in
            "--help")
                echo "Usage: emacsd COMMAND"
                echo "  --start/--daemon   Start Emacs daemon"
                echo "  --kill/--quit      Quit Emacs daemon"
                echo "  --help             Show this help"
                ;;
            "--start"|"--daemon")
                emacs --daemon
                ;;
            "--kill"|"--quit")
                emacsclient -e '(kill-emacs)'
                ;;
            *)
                echo "Unknown Emacs command: $1"
                ;;
        esac
    else
        emacs --daemon
    fi
}

# Common aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias l.='ls -d .* --color=tty'
alias ll='ls -l --color=tty'
alias ls='ls --color=tty'

alias timestamp='date +%Y%m%dT%H%M%S'

alias gc='git commit'
alias gca='git commit --amend'
alias gd='git diff'
alias gf='git fetch'
alias gfo='git fetch origin'
alias gg='git gone'
alias gm="git merge"
alias gma="git merge --abort"
alias gmc="git merge --continue"
alias gmom='git merge origin/main'
alias gpl='git pull'
alias gps='git push'
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbi='git rebase -i'
alias gst='git status'
alias gwb='git workbranch'
alias gwba='git workbranch add'
alias gwbl='git workbranch list'
alias gwbr='git workbranch remove'

# Source OS specific definitions
source_if_exists "$HOME/.bashrc.os"

# Source host specific definitions
source_if_exists "$HOME/.bashrc.host"

# Source user specific definitions
source_if_exists "$HOME/.bashrc.user"

# gpg-agent
export GPG_TTY=$(tty)

# Prevent Java tools from stealing focus
export JAVA_TOOL_OPTIONS="-Djava.awt.headless=true"

# Give Maven more memory
export MAVEN_OPTS="-Xss64m -Xms1G -Xmx3G"

# OPAM configuration
source_if_exists "$HOME/.opam/opam-init/init.sh" >/dev/null 2>&1 || true

# rustup configuration
source_if_exists "$HOME/.cargo/env" >/dev/null 2>&1 || true

# NVM
export NVM_DIR="$HOME/.nvm"
source_if_exists "$NVMPATH/nvm.sh"

# direnv
if command -v direnv >/dev/null 2>&1; then
  eval "$(direnv hook bash)"
fi

# Golang
export GOPATH="$HOME/.go"
export PATH="$GOPATH/bin:$PATH"
# We set this explicitly to tell Go not to mess with our SSH connections and use ControlMaster
# From the Go source: https://github.com/golang/go/blob/0f3becf62f3935846490e60e5005e1e4a55bec67/src/cmd/go/internal/get/get.go#L139-L157.
# Comment suggesting this issue is fixed in SSH since v7.3 (2016!): https://github.com/golang/go/issues/13453#issuecomment-255348467.
export GIT_SSH=ssh

# pyenv
if command -v pyenv >/dev/null 2>&1; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

export GPG_TTY=$(tty)

# Prevent Java tools from stealing focus
export JAVA_TOOL_OPTIONS="-Djava.awt.headless=true"

# Give Maven more memory
export MAVEN_OPTS="-Xss64m -Xms1G -Xmx3G"

# OPAM configuration
source_if_exists "$HOME/.opam/opam-init/init.sh" >/dev/null 2>&1 || true

# rustup configuration
source_if_exists "$HOME/.cargo/env" >/dev/null 2>&1 || true

# NVM
export NVM_DIR="$HOME/.nvm"
source_if_exists "$NVMPATH/nvm.sh"

# direnv
if command -v direnv >/dev/null 2>&1; then
  eval "$(direnv hook bash)"
fi

# Golang
export GOPATH="$HOME/.go"
export PATH="$GOPATH/bin:$PATH"
# We set this explicitly to tell Go not to mess with our SSH connections and use ControlMaster
# From the Go source: https://github.com/golang/go/blob/0f3becf62f3935846490e60e5005e1e4a55bec67/src/cmd/go/internal/get/get.go#L139-L157.
# Comment suggesting this issue is fixed in SSH since v7.3 (2016!): https://github.com/golang/go/issues/13453#issuecomment-255348467.
export GIT_SSH=ssh

# pyenv
if command -v pyenv >/dev/null 2>&1; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi
