## .profile.macos

source_if_exists "$HOME/.ssh-agent-local" >/dev/null 2>&1

# Add Homebrew to PATH on M1
if [ "$(uname -m)" = "arm64" ]; then
    export PATH="/opt/homebrew/bin:$PATH"
fi

brew_env="$HOME/.brew_env"
if ! command -v brew &>/dev/null; then
  echo "Warning: Missing Homebrew"
elif [ ! -e "$brew_env" ] || [ "$(brew --cellar)" -nt "$brew_env" ]; then
  echo "Regenerating Homebrew environment"

  brew_prefix() {
    brew --prefix "$1" 2>/dev/null
  }

  brew_cellar() {
    brew --cellar "$1" 2>/dev/null
  }

  brew_version() {
    if command -v jq &>/dev/null; then
      brew info --json "$1" 2>/dev/null | jq -r '.[0].installed[0].version'
    else
      echo "Warning: Missing jq required by brew_version" 1>&2
      echo VERSION_UNKOWN
    fi
  }

  : >"$brew_env"
  add_to_brew_env() {
    echo "$@" >>"$brew_env"
  }

  add_to_brew_env "# Homebrew environment (generated $(date))"

  for brew in /opt/homebrew/bin/brew /usr/local/bin/brew; do
    if [ -x "$brew" ]; then
      base_env=$("$brew" shellenv)
      eval "$base_env" # ensure we can access brew below, if this is the first time
      add_to_brew_env "$base_env"
      break
    fi
  done

  # libexec packages
  for pkg in coreutils findutils gawk gnu-indent gnu-sed gnu-tar grep; do
    if pkg="$(brew_prefix "$pkg")"; then
      add_to_brew_env "PATH=\"$pkg/libexec/gnubin:\$PATH\""
      add_to_brew_env "MANPATH=\"$pkg/libexec/gnuman:\$MANPATH\""
    fi
  done

  # bin packages
  for pkg in curl gnu-getopt ruby scala sphinx-doc texinfo; do
    if pkg="$(brew_prefix "$pkg")"; then
      add_to_brew_env "PATH=\"$pkg/bin:\$PATH\""
    fi
  done

  # sbin packages
  # shellcheck disable=SC2043
  for pkg in mtr; do
    if pkg="$(brew_prefix "$pkg")"; then
      add_to_brew_env "PATH=\"$pkg/sbin:\$PATH\""
    fi
  done

  if pkg="$(brew_prefix scala)"; then
    add_to_brew_env "SCALA_HOME=\"$pkg/libexec\""
    add_to_brew_env "export SCALA_HOME"
  fi
  if ! command -v scalaenv >/dev/null 2>&1; then
    echo "Warning: Missing scalaenv"
  else
    add_to_brew_env "$(scalaenv init -)"
  fi

  if ! command -v rbenv >/dev/null 2>&1; then
    echo "Warning: Missing rbenv"
  else
    add_to_brew_env "$(rbenv init -)"
  fi

  if pkg="$(brew_prefix go)"; then
    add_to_brew_env "PATH=\"$pkg/libexec/bin:\$PATH\""
  fi

  if pkg="$(brew_prefix nvm)"; then
    add_to_brew_env "NVMPATH=\"$pkg\""
    add_to_brew_env "export NVMPATH"
  fi

  if pkg="$(brew_cellar borgbackup)"; then
    # we need to get the version manually, because
    # brew --prefix is broken for borgbackup
    pkg="$pkg/$(brew_version borgbackup)"
    add_to_brew_env "PATH=\"$pkg/bin:\$PATH\""
  fi

  add_to_brew_env "source_if_exists \"$(brew --prefix)/etc/bash_completion\""

  add_to_brew_env "export PATH MANPATH"

  # shellcheck disable=SC1090
  . "$brew_env"
else
  . "$brew_env"
fi

# NVM
source_if_exists "/usr/local/opt/nvm/nvm.sh"
source_if_exists "/usr/local/opt/nvm/etc/bash_completion.d/nvm"

# Node
export NODE_PATH="/usr/local/lib/node_modules:$NODE_PATH"

# Nix
source_if_exists "$HOME/.nix-profile/etc/profile.d/nix.sh"

# SDKMAN
export SDKMAN_DIR="/usr/local/sdkman"
if [ -d "$SDKMAN_DIR" ]; then
  source_if_exists "$SDKMAN_DIR/bin/sdkman-init.sh"
else
  echo "Warning: Missing SDKMAN in $SDKMAN_DIR"
fi

export LC_ALL="en_US.UTF-8"
